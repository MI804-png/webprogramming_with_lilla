name: Deploy to Linux (Manual)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: "main"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare SSH key
        if: ${{ secrets.SSH_KEY != '' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          touch ~/.ssh/known_hosts
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy over SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REPO_URL: ${{ secrets.REPO_URL || github.server_url + '/' + github.repository }}
          BRANCH: ${{ github.event.inputs.branch || 'main' }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          APP_PORT: ${{ secrets.APP_PORT || '3000' }}
        run: |
          ssh -i ~/.ssh/deploy_key -p "$SSH_PORT" -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" bash -lc '
            set -euo pipefail
            export REPO_URL="'"$REPO_URL"'"
            export BRANCH="'"$BRANCH"'"
            export APP_BASE="$HOME/webprogramming_with_lilla"
            export APP_DIR="$APP_BASE/exercise"
            # Install base tools and Node if missing
            if ! command -v node >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y git curl build-essential ca-certificates gnupg
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
              sudo npm i -g pm2
            fi
            # Clone or update repo
            if [ ! -d "$APP_BASE/.git" ]; then
              git clone "$REPO_URL" "$APP_BASE"
            fi
            cd "$APP_BASE"
            git fetch --all --prune
            git checkout "$BRANCH"
            git pull --ff-only origin "$BRANCH"
            cd "$APP_DIR"
            # Ensure scripts executable
            chmod +x scripts/*.sh || true
            # Prepare env file
            if [ ! -f .env ]; then
              if [ -f .env.production.example ]; then cp .env.production.example .env; else touch .env; fi
            fi
            # Update .env with provided secrets (append if missing)
            for KV in DB_HOST DB_PORT DB_USER DB_PASS DB_NAME SESSION_SECRET; do
              V=$(eval echo \$$KV)
              if grep -q "^$KV=" .env; then sed -i "s|^$KV=.*|$KV=$V|" .env; else echo "$KV=$V" >> .env; fi
            done
            if grep -q "^PORT=" .env; then sed -i "s|^PORT=.*|PORT='"$APP_PORT"'|" .env; else echo "PORT='"$APP_PORT"'" >> .env; fi
            # Install dependencies
            npm ci || npm install
            # Import DB schema (best-effort)
            if command -v mysql >/dev/null 2>&1; then
              ./scripts/import-db.sh || true
            else
              echo "mysql client not installed; skipping import-db"
            fi
            # Start/Restart with PM2
            pm2 start ecosystem.config.js --update-env || pm2 start start.js --name techcorp
            pm2 save
            echo "Deployed. Check health: curl http://127.0.0.1:'"$APP_PORT"'/health"
          '

      - name: Show completion
        run: echo "Deployment job finished."
